# Example overrides for a dev environment, assuming you pull `ojs.compose.yaml`
# and `db.compose.yml` into your main compose file. This shows how your web
# environment might look in development.
#
# For a production setup, you will definitely not use this as-is. Some
# examples of what might change:
#
# - You might use an external database, so you'd have to specify the production
#   database env vars here and remove the "db" service
# - Even if you do use a containerized database, you almost certainly don't
#   want to mount any SQL into it
# - You should set HTTPS to "on" (and only allow secure traffic to the
#   container)
name: ojs
services:
  web:
    # Uncomment below to build an image with different PHP or OJS. Set "image"
    # to anything that makes sense, but be sure it's the same for "web" and
    # "workers" so you don't have to double-specify the build args.
    #build:
    #  args:
    #    - PHP_VERSION=7.3
    #    - OJS_VERSION=3.3.0-8
    image: ojs-dev:latest
    environment:
      HTTPS: "off"
      SERVER_PORT: "8080"
    ports:
      - 8080:80
    depends_on:
      - db
      - smtpdebug

    # Local volume example: this makes critical data volumes live on local disk
    # for easier editing, rsyncing, etc.
    volumes: &dev-vols
      - ./vols/private-files:/var/local/ojs-files
      - ./vols/public-files:/var/www/html/public
      - ./vols/plugins:/var/www/html/plugins
      - ./vols/config:/var/local/config

  # Technically for dev you might not need a worker service at all. If you do,
  # though, it needs to use the same image and volumes as "web".
  worker:
    # Make sure this matches web's image
    image: ojs-dev:latest
    depends_on:
      - db
      - smtpdebug
    volumes: *dev-vols

  db:
    ports:
      - 3306:3306
